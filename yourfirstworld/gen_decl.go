// Code generated by mediator autocoder; DO NOT EDIT.
package main

import (
	"github.com/celskeggs/mediator/platform/atoms"
	"github.com/celskeggs/mediator/platform/datum"
	"github.com/celskeggs/mediator/platform/format"
	"github.com/celskeggs/mediator/platform/framework"
	"github.com/celskeggs/mediator/platform/procs"
	"github.com/celskeggs/mediator/platform/types"
	"github.com/celskeggs/mediator/platform/world"
)

//mediator:declare MobPlayerData /mob/player /mob
type MobPlayerData struct {
}

func NewMobPlayerData(src *types.Datum, _ *MobPlayerData, _ ...types.Value) {
	src.SetVar("icon", atoms.WorldOf(src).Icon("player.dmi"))
	src.SetVar("desc", types.String("A handsome and dashing rogue."))
	src.SetVar("name", types.String("player"))
	src.SetVar("verbs", src.Var("verbs").Invoke(nil, "+", atoms.NewVerb("look", "/mob/player", "look")))
}

func (*MobPlayerData) ProcBump(varsrc *types.Datum, varusr *types.Datum, varobstacle types.Value) types.Value {
	(varsrc).Invoke(varusr, "<<", types.String("You bump into "+format.FormatMacro("the", varobstacle)+"."))
	(varsrc).Invoke(varusr, "<<", procs.NewSound("ouch.wav"))
	return nil
}

func (*MobPlayerData) Proclook(varsrc *types.Datum, varusr *types.Datum) types.Value {
	(varsrc).Invoke(varusr, "<<", types.String("You see..."))
	for _, varo := range datum.Elements(procs.Invoke(atoms.WorldOf(varsrc), varusr, "oview")) {
		if !types.IsType(varo, "/atom/movable") {
			continue
		}
		(varsrc).Invoke(varusr, "<<", types.String(format.FormatMacro("The", varo)+".  "+format.FormatMacro("The", (varo).Var("desc"))))
	}
	return nil
}

//mediator:declare MobRatData /mob/rat /mob
type MobRatData struct {
}

func NewMobRatData(src *types.Datum, _ *MobRatData, _ ...types.Value) {
	src.SetVar("icon", atoms.WorldOf(src).Icon("rat.dmi"))
	src.SetVar("desc", types.String("It's quite large."))
	src.SetVar("name", types.String("rat"))
}

//mediator:declare TurfFloorData /turf/floor /turf
type TurfFloorData struct {
}

func NewTurfFloorData(src *types.Datum, _ *TurfFloorData, _ ...types.Value) {
	src.SetVar("icon", atoms.WorldOf(src).Icon("floor.dmi"))
	src.SetVar("name", types.String("floor"))
}

//mediator:declare TurfWallData /turf/wall /turf
type TurfWallData struct {
}

func NewTurfWallData(src *types.Datum, _ *TurfWallData, _ ...types.Value) {
	src.SetVar("icon", atoms.WorldOf(src).Icon("wall.dmi"))
	src.SetVar("density", types.Int(1))
	src.SetVar("opacity", types.Int(1))
	src.SetVar("name", types.String("wall"))
}

//mediator:extend ExtObjData /obj
type ExtObjData struct {
}

func NewExtObjData(src *types.Datum, _ *ExtObjData, _ ...types.Value) {
	src.SetVar("verbs", src.Var("verbs").Invoke(nil, "+", atoms.NewVerb("get", "/obj", "get")))
	src.SetVar("verbs", src.Var("verbs").Invoke(nil, "+", atoms.NewVerb("drop", "/obj", "drop")))
}

func (*ExtObjData) Procget(varsrc *types.Datum, varusr *types.Datum) types.Value {
	(varusr).Invoke(varusr, "<<", types.String("You get "+format.FormatMacro("the", varsrc)+"."))
	_ = (varsrc).Invoke(varusr, "Move", varusr)
	return nil
}

func (*ExtObjData) SettingsForProcget() types.ProcSettings {
	return types.ProcSettings{
		Src: types.SrcSetting{
			Type: types.SrcSettingTypeOView,
			In:   true,
		},
	}
}
func (*ExtObjData) Procdrop(varsrc *types.Datum, varusr *types.Datum) types.Value {
	(varusr).Invoke(varusr, "<<", types.String("You drop "+format.FormatMacro("the", varsrc)+"."))
	_ = (varsrc).Invoke(varusr, "Move", (varusr).Var("loc"))
	return nil
}

func (*ExtObjData) SettingsForProcdrop() types.ProcSettings {
	return types.ProcSettings{
		Src: types.SrcSetting{
			Type: types.SrcSettingTypeUsr,
			In:   true,
		},
	}
}

//mediator:declare ObjCheeseData /obj/cheese /obj
type ObjCheeseData struct {
}

func NewObjCheeseData(src *types.Datum, _ *ObjCheeseData, _ ...types.Value) {
	src.SetVar("icon", atoms.WorldOf(src).Icon("cheese.dmi"))
	src.SetVar("desc", types.String("It is quite smelly."))
	src.SetVar("name", types.String("cheese"))
}

//mediator:declare ObjScrollData /obj/scroll /obj
type ObjScrollData struct {
}

func NewObjScrollData(src *types.Datum, _ *ObjScrollData, _ ...types.Value) {
	src.SetVar("icon", atoms.WorldOf(src).Icon("scroll.dmi"))
	src.SetVar("desc", types.String("It looks to be rather old."))
	src.SetVar("name", types.String("scroll"))
}

//mediator:extend ExtAreaData /area
type ExtAreaData struct {
	VarMusic types.Value
}

func NewExtAreaData(src *types.Datum, _ *ExtAreaData, _ ...types.Value) {
}

func (*ExtAreaData) ProcEntered(varsrc *types.Datum, varusr *types.Datum, varm types.Value) types.Value {
	if types.AsBool(procs.OperatorNot(procs.Invoke(atoms.WorldOf(varsrc), varusr, "ismob", varm))) {
		return nil
	}
	(varm).Invoke(varusr, "<<", varsrc.Var("desc"))
	(varm).Invoke(varusr, "<<", procs.KWInvoke(atoms.WorldOf(varsrc), varusr, "sound", map[string]types.Value{"channel": types.Int(1)}, varsrc.Var("music"), types.Int(1)))
	return nil
}

func (*ExtAreaData) SettingsForProcEntered() types.ProcSettings {
	return types.ProcSettings{
		Src: types.SrcSetting{
			Type: types.SrcSettingTypeView,
		},
	}
}

//mediator:declare AreaOutsideData /area/outside /area
type AreaOutsideData struct {
}

func NewAreaOutsideData(src *types.Datum, _ *AreaOutsideData, _ ...types.Value) {
	src.SetVar("desc", types.String("Nice and jazzy, here..."))
	src.SetVar("music", procs.NewSound("jazzy.mid"))
	src.SetVar("name", types.String("outside"))
}

//mediator:declare AreaCaveData /area/cave /area
type AreaCaveData struct {
}

func NewAreaCaveData(src *types.Datum, _ *AreaCaveData, _ ...types.Value) {
	src.SetVar("desc", types.String("Watch out for the giant rat!"))
	src.SetVar("music", procs.NewSound("cavern.mid"))
	src.SetVar("name", types.String("cave"))
}

func BeforeMap(world *world.World) []string {
	world.Name = "Your First World"
	world.Mob = "/mob/player"
	return []string{
		"map.dmm",
	}
}

func BuildWorld() *world.World {
	world, _ := framework.BuildWorld(Tree, BeforeMap)
	return world
}

func main() {
	framework.Launch(Tree, BeforeMap)
}
