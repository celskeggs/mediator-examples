// Code generated by mediator boilerplate; DO NOT EDIT.
package main

import (
	"github.com/celskeggs/mediator/platform/types"
)

type tree struct{}

type treeSingletons struct {
	Area        *types.Datum
	AreaCave    *types.Datum
	AreaOutside *types.Datum
}

var Tree types.TypeTree = tree{}

func (tree) PopulateRealm(realm *types.Realm) {
	realm.TreePrivateState = &treeSingletons{
		Area:        NewArea(realm),
		AreaCave:    NewAreaCave(realm),
		AreaOutside: NewAreaOutside(realm),
	}
}

func (tree) Parent(path types.TypePath) types.TypePath {
	switch path {
	case "/area":
		return "/atom"
	case "/area/cave":
		return "/area"
	case "/area/outside":
		return "/area"
	case "/atom":
		return "/datum"
	case "/atom/movable":
		return "/atom"
	case "/client":
		return "/datum"
	case "/datum":
		return ""
	case "/mob":
		return "/atom/movable"
	case "/mob/player":
		return "/mob"
	case "/mob/rat":
		return "/mob"
	case "/obj":
		return "/atom/movable"
	case "/obj/cheese":
		return "/obj"
	case "/obj/scroll":
		return "/obj"
	case "/turf":
		return "/atom"
	case "/turf/floor":
		return "/turf"
	case "/turf/wall":
		return "/turf"
	default:
		panic("unknown type " + path.String())
	}
}

func (tree) New(realm *types.Realm, path types.TypePath, params ...types.Value) *types.Datum {
	switch path {
	case "/area":
		return realm.TreePrivateState.(*treeSingletons).Area
	case "/area/cave":
		return realm.TreePrivateState.(*treeSingletons).AreaCave
	case "/area/outside":
		return realm.TreePrivateState.(*treeSingletons).AreaOutside
	case "/atom":
		return NewAtom(realm, params...)
	case "/atom/movable":
		return NewAtomMovable(realm, params...)
	case "/client":
		return NewClient(realm, params...)
	case "/datum":
		return NewDatum(realm, params...)
	case "/mob":
		return NewMob(realm, params...)
	case "/mob/player":
		return NewMobPlayer(realm, params...)
	case "/mob/rat":
		return NewMobRat(realm, params...)
	case "/obj":
		return NewObj(realm, params...)
	case "/obj/cheese":
		return NewObjCheese(realm, params...)
	case "/obj/scroll":
		return NewObjScroll(realm, params...)
	case "/turf":
		return NewTurf(realm, params...)
	case "/turf/floor":
		return NewTurfFloor(realm, params...)
	case "/turf/wall":
		return NewTurfWall(realm, params...)
	default:
		panic("unknown type " + path.String())
	}
}
