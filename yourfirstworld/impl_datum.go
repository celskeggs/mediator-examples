// Code generated by mediator boilerplate; DO NOT EDIT.
package main

import (
	"github.com/celskeggs/mediator/platform/datum"
	"github.com/celskeggs/mediator/platform/types"
)

type DatumImpl struct {
	datum.DatumData
}

func NewDatum(realm *types.Realm, params ...types.Value) *types.Datum {
	i := &DatumImpl{}
	d := realm.NewDatum(i)
	datum.NewDatumData(d, &i.DatumData, params...)
	return d
}

func (t *DatumImpl) Type() types.TypePath {
	return "/datum"
}

func (t *DatumImpl) Var(src *types.Datum, name string) (types.Value, bool) {
	switch name {
	case "type":
		return types.TypePath("/datum"), true
	case "parent_type":
		return nil, true
	default:
		return nil, false
	}
}

func (t *DatumImpl) SetVar(src *types.Datum, name string, value types.Value) types.SetResult {
	switch name {
	case "type":
		return types.SetResultReadOnly
	case "parent_type":
		return types.SetResultReadOnly
	default:
		return types.SetResultNonexistent
	}
}

func (t *DatumImpl) Proc(src *types.Datum, usr *types.Datum, name string, params ...types.Value) (types.Value, bool) {
	switch name {
	case "New":
		return t.DatumData.ProcNew(src, usr), true
	default:
		return nil, false
	}
}

func (t *DatumImpl) ProcSettings(name string) (types.ProcSettings, bool) {
	switch name {
	case "New":
		return types.ProcSettings{}, true
	default:
		return types.ProcSettings{}, false
	}
}

func (t *DatumImpl) Chunk(ref string) interface{} {
	switch ref {
	case "github.com/celskeggs/mediator/platform/datum.DatumData":
		return &t.DatumData
	default:
		return nil
	}
}
