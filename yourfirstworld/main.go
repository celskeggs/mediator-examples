// Code generated by mediator; DO NOT EDIT.
package main

import (
	"github.com/celskeggs/mediator/platform"
	"github.com/celskeggs/mediator/platform/datum"
	"github.com/celskeggs/mediator/platform/icon"
)

type DefinedWorld struct {
	platform.BaseTreeDefiner
}

func (DefinedWorld) ElaborateTree(tree *datum.TypeTree, icons *icon.IconCache) {
	prototypeMobPlayer := tree.Derive("/mob", "/mob/player").(platform.IMob)
	prototypeMobPlayer.AsAtom().Appearance.Icon = icons.LoadOrPanic("player.dmi")
	prototypeMobPlayer.AsAtom().Appearance.Name = "player"

	prototypeMobRat := tree.Derive("/mob", "/mob/rat").(platform.IMob)
	prototypeMobRat.AsAtom().Appearance.Icon = icons.LoadOrPanic("rat.dmi")
	prototypeMobRat.AsAtom().Appearance.Name = "rat"

	prototypeTurfFloor := tree.Derive("/turf", "/turf/floor").(platform.ITurf)
	prototypeTurfFloor.AsAtom().Appearance.Icon = icons.LoadOrPanic("floor.dmi")
	prototypeTurfFloor.AsAtom().Appearance.Name = "floor"

	prototypeTurfWall := tree.Derive("/turf", "/turf/wall").(platform.ITurf)
	prototypeTurfWall.AsAtom().Appearance.Icon = icons.LoadOrPanic("wall.dmi")
	prototypeTurfWall.AsAtom().Density = true
	prototypeTurfWall.AsAtom().Opacity = true
	prototypeTurfWall.AsAtom().Appearance.Name = "wall"

	prototypeObjCheese := tree.Derive("/obj", "/obj/cheese").(platform.IObj)
	prototypeObjCheese.AsAtom().Appearance.Icon = icons.LoadOrPanic("cheese.dmi")
	prototypeObjCheese.AsAtom().Appearance.Name = "cheese"

	prototypeObjScroll := tree.Derive("/obj", "/obj/scroll").(platform.IObj)
	prototypeObjScroll.AsAtom().Appearance.Icon = icons.LoadOrPanic("scroll.dmi")
	prototypeObjScroll.AsAtom().Appearance.Name = "scroll"

	prototypeAreaOutside := tree.Derive("/area", "/area/outside").(platform.IArea)
	prototypeAreaOutside.AsAtom().Appearance.Name = "outside"

	prototypeAreaCave := tree.Derive("/area", "/area/cave").(platform.IArea)
	prototypeAreaCave.AsAtom().Appearance.Name = "cave"
}

func (DefinedWorld) BeforeMap(world *platform.World) {
	world.Name = "Your First World"
	world.Mob = "/mob/player"
}

func (d DefinedWorld) Definer() platform.TreeDefiner {
	return d
}
